PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.ArrayList;


class TIPO{
  String tipo;
  public TIPO(String tipo){
    this.tipo=tipo;
  }
public String toString(){
    return tipo; 
  }

}

class OPERADOR{
  String op;
  public OPERADOR(String op){
    this.op=op;
  }
public String toString(){
    return op; 
  }

}

class VARDECL{
	ArrayList<TIPO> tipos;
	ArrayList<String> ids;

public VARDECL(ArrayList<TIPO> tipos, ArrayList<String> ids){
    this.tipos = tipos;
    this.ids = ids;
  }
public String toString(){
  String acumulador = "";
  for(int i = 0; i< this.tipos.size(); i++){
    acumulador+= this.tipos.get(i)+ " " + this.ids.get(i) +";\n";
  }
    return acumulador;
  }
}

class LISTAARG{
	ArrayList<TIPO> tipos;
	ArrayList<String> ids;

public LISTAARG(ArrayList<TIPO> tipos, ArrayList<String> ids){
    this.tipos = tipos;
    this.ids = ids;
  }
public String toString(){
  String acumulador = "";
  for(int i = 0; i< this.tipos.size(); i++){
    acumulador+= this.tipos.get(i)+ " " + this.ids.get(i);
  if(i< this.tipos.size()-1){
    acumulador+=",";
  }
  }
    return acumulador;
  }
}



	class FUNC{
    TIPO tipo;
  String id;
  LISTAARG argumentos;
  VARDECL variaveis;

public FUNC(TIPO tipo,String id, LISTAARG argumentos, VARDECL variaveis)
{
    this.tipo = tipo;
    this.id = id;
    this.argumentos=argumentos;
    this.variaveis = variaveis;
  }
public String toString(){
  String acumulador = this.tipo.toString() + " " + this.id + "(" + this.argumentos+")"+"{" ;
  acumulador+=variaveis.toString();
  acumulador+="}";
  return acumulador;
  
}
}


class COMANDO{
}
class COMANDOCONTROLADO extends COMANDO{
  ArrayList<EXP> exps;
	ArrayList<String> seqcomandos;
}

class IF extends COMANDOCONTROLADO{}
class WHILE extends COMANDOCONTROLADO{}
class DOWHILE extends COMANDOCONTROLADO{}

class SEQCOMANDOS{}

class FATOR{
  String fator;
  public FATOR(String fator){
    this.fator=fator;
  }
public String toString(){
    return fator; 
  }

}

class EXP{
  OPERADOR op; 
  EXP exp1; 
  EXP exp2;
  FATOR fator;
  public EXP(EXP exp1, OPERADOR op, EXP exp2){
    this.op=op;
    this.exp1 = exp1;
    this.exp2 = exp2;
  }
  public EXP(FATOR fator){
    this.fator=fator;
  }
public String toString(){
  if(this.fator!=null){
    return this.fator.toString() + "alo";
  }
    return this.exp1.toString() + this.op.toString() + this.exp2.toString()+ "alo" ; 
  }

}

class LISTAEXP{
	ArrayList<EXP> exps;
	public LISTAEXP (ArrayList<EXP> exps){
    this.exps = exps;
  }
public String toString(){
  String acumulador = "";
  for(int i = 0; i< this.exps.size(); i++){
    acumulador+= this.exps.get(i).toString();
  if(i< this.exps.size()-1){
    acumulador+=", ";
  }
  }
    return acumulador;
  }
  }

public class Lugosi {

  public static void main(String args[]) throws ParseException,IOException {
    
 Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
 analisador.Lugosi();
  }

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <VAR: "var">
| <SEMI: ";">
| <INT:"int">
| <BOOL:"bool">
| <FLOAT:"float">
| <VOID:"void">
| <ATTRIB:":=">
| <APARENT: "(">
| <FPARENT: ")">
| <IF:"if">
| <WHILE:"while">
| <DO:"do">
| <RETURN:"return">
| <PRINT:"print">
| <TRUE:"true">
| <FALSE:"false">
| <OPSOMA:"+">
| <OPSUB:"-">
| <OPMULT:"*">
| <OPDIV:"/">
| <OPAND:"&&">
| <OPOR:"||">
| <OPMENORQ:"<">
| <OPMAIORQ:">">
| <OPIGUAL:"==">
| <OPCOMMA:",">
| <FUNCTION: "function">
| <TOKEN_ID: <LETRA> (<LETRAOUDIGITO>)* (<FINALSUBLINHADO>)* >
| <TOKEN_NUMLITERAL: <DIGITOS> <FACAO_OPCIONAL> <EXPOENTE_OPCIONAL> >
}

TOKEN :
{

 <LETRA: ["a"-"z","A"-"Z"]>
 |<DIGITO: ["0"-"9"]>
 |<DIGITOS: (<DIGITO>)+>
 |<FACAO_OPCIONAL: ("."(<DIGITOS>))?>
 |<EXPOENTE_OPCIONAL: ("E"("+" | "-")? <DIGITOS>)? >
 |<LETRAOUDIGITO: (<LETRA>| <DIGITO>) >
 |<FINALSUBLINHADO: ("_"(<LETRAOUDIGITO>)+)>
}



void Lugosi () :
{Token t;}
{
regraMain()
(regraFunc())?
<EOF> 
}

void regraMain():
{}
{
  <MAIN> <ACHAVES>
  regraVardecl()
  regraSeqcomandos()
  <FCHAVES>

}

VARDECL regraVardecl():
{ArrayList<TIPO> tipos = new ArrayList(); ArrayList<String> ids = new ArrayList(); TIPO tipo = null; Token id = null;}
{
  (<VAR> tipo = regraTipo() id = <TOKEN_ID> <SEMI> {tipos.add(tipo); ids.add(id.image);})*
  {return new VARDECL(tipos, ids);}
}

TIPO regraTipo():
{Token t = null;}
{
   (t = <INT> |t = <BOOL> | t =<FLOAT> | t =<VOID>)

  {return new TIPO(t.image);}
}

SEQCOMANDOS regraSeqcomandos():
{}
{
  (regraComando())*
  {return new SEQCOMANDOS();}
}

COMANDO regraComando():
{Token tPrincipal=null; EXP exp = null; SEQCOMANDOS seqcomandos = null; }
{
  (tPrincipal = <TOKEN_ID> ((<ATTRIB> exp = regraExp() <SEMI>)|(<APARENT> (regraListaExp(new ArrayList<EXP>()))? <FPARENT> <SEMI>))
|  tPrincipal = <IF> <APARENT> exp = regraExp() <FPARENT> <ACHAVES>  regraSeqcomandos() <FCHAVES> <SEMI> 
| tPrincipal = <WHILE> <APARENT> exp = regraExp() <FPARENT> <DO> <ACHAVES>  regraSeqcomandos() <FCHAVES> <SEMI> 
| tPrincipal= <DO> <ACHAVES>  regraSeqcomandos() <FCHAVES> <WHILE> <APARENT> exp = regraExp() <FPARENT> <SEMI> 
| tPrincipal = <RETURN> exp = regraExp() <SEMI> 
| tPrincipal = <PRINT> <APARENT> exp = regraExp() <FPARENT> <SEMI>)
{System.out.println("AAAA"+ tPrincipal.image);}
{return new COMANDO();}

  
}

EXP regraExp():
{FATOR f=null; OPERADOR op=null; EXP exp1=null; EXP exp2=null;}
{
  (f = regraFator()| (<APARENT> exp1=regraExp() op = regraOp() exp2 =regraExp() <FPARENT>))
  {if(f==null){
    System.out.println(new EXP(exp1,op,exp2).toString());
    return new EXP(exp1,op,exp2);
    } else{
      System.out.println(new EXP(f).toString());
    return new EXP(f);
    }
  }

}

FATOR regraFator():
{Token t; LISTAEXP regras; ArrayList<Boolean> regrasFinais = null;}
{
  (t = <TOKEN_ID> (<APARENT> regras = regraListaExp(new ArrayList<EXP>()) <FPARENT>)? 
  | t= <TOKEN_NUMLITERAL>
  | t = <TRUE>
  | t= <FALSE>)
  {return new FATOR(t.image);}
}

OPERADOR regraOp():
{Token t = null;}
{
  (t = <OPSOMA>
| t = <OPSUB>
| t = <OPMULT>
| t = <OPDIV>
| t = <OPAND>
| t = <OPOR>
| t = <OPMENORQ>
| t = <OPMAIORQ>
| t = <OPIGUAL>)
  {return new OPERADOR(t.image);}
}

LISTAEXP regraListaExp(ArrayList<EXP> exps):
{ EXP exp = null;}
{
  exp = regraExp() {exps.add(exp);} regraListaExpAux(exps)
  {System.out.println( new LISTAEXP(exps).toString());}
{return new LISTAEXP(exps);}
}

void regraListaExpAux(ArrayList<EXP> exps):
{EXP exp = null;}
{
  (<OPCOMMA> exp = regraExp() {exps.add(exp);} regraListaExpAux(exps))?
}

FUNC regraFunc():
{TIPO tipo = null; Token id = null; LISTAARG argumentos = null; VARDECL variaveis = null;}
{
  (<FUNCTION> tipo=regraTipo() id=<TOKEN_ID> <APARENT> argumentos = regraListaArg(new ArrayList<TIPO>(),new ArrayList<String>()) <FPARENT> <ACHAVES> variaveis = regraVardecl()
  regraSeqcomandos() <FCHAVES>)+

  {return new FUNC(tipo, id.image, argumentos, variaveis);}
}

LISTAARG regraListaArg(ArrayList<TIPO> tiposParam, ArrayList<String> idsParam ):
{TIPO tipo = null; Token id = null;}
{
  (tipo = regraTipo() id = <TOKEN_ID> {tiposParam.add(tipo); idsParam.add(id.image);} (<OPCOMMA> regraListaArg(tiposParam, idsParam))?)
  {return new LISTAARG(tiposParam, idsParam);}

}

