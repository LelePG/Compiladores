PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.ArrayList;


class TIPO{
  String tipo;
  public TIPO(String tipo){
    this.tipo=tipo;
  }
public String toString(){
    return tipo; 
  }

}

class OPERADOR{
  String op;
  public OPERADOR(String op){
    this.op=op;
  }
public String toString(){
    return op; 
  }

}

class VARDECL{
	ArrayList<TIPO> tipos;
	ArrayList<String> ids;

public VARDECL(ArrayList<TIPO> tipos, ArrayList<String> ids){
    this.tipos = tipos;
    this.ids = ids;
  }
public String toString(){
  String acumulador = "";
  for(int i = 0; i< this.tipos.size(); i++){
    acumulador+= this.tipos.get(i)+ " " + this.ids.get(i) +";\n";
  }
    return acumulador;
  }
}

class LISTAARG{
	ArrayList<TIPO> tipos;
	ArrayList<String> ids;

public LISTAARG(ArrayList<TIPO> tipos, ArrayList<String> ids){
    this.tipos = tipos;
    this.ids = ids;
  }
public String toString(){
  String acumulador = "";
  for(int i = 0; i< this.tipos.size(); i++){
    acumulador+= this.tipos.get(i)+ " " + this.ids.get(i);
  if(i< this.tipos.size()-1){
    acumulador+=",";
  }
  }
    return acumulador;
  }
}



	class FUNC{
    TIPO tipo;
  String id;
  LISTAARG argumentos;
  VARDECL variaveis;
  SEQCOMANDOS seqcomandos;

public FUNC(TIPO tipo,String id, LISTAARG argumentos, VARDECL variaveis, SEQCOMANDOS seqcomandos)
{
    this.tipo = tipo;
    this.id = id;
    this.argumentos=argumentos;
    this.variaveis = variaveis;
    this.seqcomandos = seqcomandos;
  }
public String toString(){
  String acumulador = this.tipo.toString() + " " + this.id + "(" + this.argumentos.toString()+"){\n" ;
  acumulador+=variaveis.toString();
  acumulador+=seqcomandos.toString();
  acumulador+="}";
  return acumulador;
  
}
}

class IMPRIMEFUNCS{
	ArrayList<FUNC> funcs;

public IMPRIMEFUNCS(ArrayList<FUNC> funcs){
    this.funcs = funcs;
  }
public String toString(){
  String acumulador = "";
  for(int i = 0; i< this.funcs.size(); i++){
    acumulador+= this.funcs.get(i);
  }
    return acumulador;
  }
}

class COMANDO{
}
class COMANDOCONTROLADO extends COMANDO{
  EXP exp;
	SEQCOMANDOS seqcomandos;
}

class IF extends COMANDOCONTROLADO{
  public IF (EXP exp,	SEQCOMANDOS seqcomandos){
    this.exp= exp;
    this.seqcomandos = seqcomandos;
  }
  public String toString(){
    String acumulador = "if(" + this.exp.toString() + "){\n";
    acumulador+= this.seqcomandos.toString() + "\n}\n";
    return acumulador;
  }
}
class WHILE extends COMANDOCONTROLADO{
   public WHILE (EXP exp,	SEQCOMANDOS seqcomandos){
    this.exp = exp;
    this.seqcomandos = seqcomandos;
  }
  public String toString(){
    String acumulador = "while(" + this.exp.toString() + "){\n";
    acumulador+= this.seqcomandos.toString() + "\n}\n";
    return acumulador;
  }
}
class DOWHILE extends COMANDOCONTROLADO{
   public DOWHILE (EXP exp,	SEQCOMANDOS seqcomandos){
    this.exp = exp;
    this.seqcomandos = seqcomandos;
  }
  public String toString(){
    String acumulador = "do{\n" + this.seqcomandos.toString();
    acumulador+= "}while(" + this.exp.toString() + ");\n";
    return acumulador;
  }
}

class COMANDOSAIDA extends COMANDO{
  EXP exp;
}

class PRINT extends COMANDOSAIDA{
  public PRINT(EXP exp){
    this.exp = exp;
  }

  public String toString(){
    return "print(" + this.exp.toString()+");\n";
  }
}

class RETURN extends COMANDOSAIDA{
  public RETURN(EXP exp){
    this.exp = exp;
  }

  public String toString(){
    return "return" + this.exp.toString()+";\n";
  }
}

class ATRIB extends COMANDOSAIDA{
  String id;
  public ATRIB(String id, EXP exp){
    this.exp = exp;
    this.id = id;
  }

  public String toString(){
    return this.id +" = " + this.exp.toString()+";\n";
  }
}

class CHAMADA extends COMANDO{
  String id;
  LISTAEXP exps;
  public CHAMADA(String id, LISTAEXP exps){
    this.exps = exps;
    this.id = id;
  }

  public String toString(){
    if(this.exps != null){
    return this.id +"(" + this.exps.toString()+");\n";
    };
        return this.id +"();\n";

  }
}



class FATOR{
  String fator;
  LISTAEXP exps;
  public FATOR(String fator){
    this.fator=fator;
  }
  public FATOR(String fator, LISTAEXP exps){
    this.fator=fator;
    this.exps = exps;
  }
public String toString(){
  if(this.exps!=null){
  return fator + "GGGGGGGGG " + exps.toString();
  }
    return fator + "FATP"; 
  }

}

class EXP{
  OPERADOR op; 
  EXP exp1; 
  EXP exp2;
  FATOR fator;
  public EXP(EXP exp1, OPERADOR op, EXP exp2){
    this.op=op;
    this.exp1 = exp1;
    this.exp2 = exp2;
  }
  public EXP(FATOR fator){
    this.fator=fator;
  }
public String toString(){
  if(this.fator!=null){
    return this.fator.toString() + "alo";
  }
    return this.exp1.toString() + this.op.toString() + this.exp2.toString()+ "alo" ; 
  }

}

class SEQCOMANDOS{
	ArrayList<COMANDO> comandos;
	public SEQCOMANDOS (ArrayList<COMANDO> comandos){
    this.comandos = comandos;
  }
  public SEQCOMANDOS (){
    this.comandos = null;
  }
public String toString(){
  String acumulador = "";
  if(this.comandos == null){
    return "";
  }
  for(int i = 0; i< this.comandos.size(); i++){
    acumulador+= this.comandos.get(i) + "/n";
  }
    return acumulador;
  }
  }


  class MAIN{
    VARDECL variaveis; 
    SEQCOMANDOS seqcomandos;
    public MAIN(VARDECL variaveis, SEQCOMANDOS seqcomandos){
      this.variaveis = variaveis;
      this.seqcomandos = seqcomandos;
    }

    public String toString(){
      String acumulador = "main{\n" + this.variaveis.toString() + this.seqcomandos.toString() +"}\n";
      return acumulador;
    }
  }

public class Lugosi {

  public static void main(String args[]) throws ParseException,IOException {
    
 Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
 analisador.Lugosi();
  }

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <VAR: "var">
| <SEMI: ";">
| <INT:"int">
| <BOOL:"bool">
| <FLOAT:"float">
| <VOID:"void">
| <ATTRIB:":=">
| <APARENT: "(">
| <FPARENT: ")">
| <IF:"if">
| <WHILE:"while">
| <DO:"do">
| <RETURN:"return">
| <PRINT:"print">
| <TRUE:"true">
| <FALSE:"false">
| <OPSOMA:"+">
| <OPSUB:"-">
| <OPMULT:"*">
| <OPDIV:"/">
| <OPAND:"&&">
| <OPOR:"||">
| <OPMENORQ:"<">
| <OPMAIORQ:">">
| <OPIGUAL:"==">
| <OPCOMMA:",">
| <FUNCTION: "function">
| <TOKEN_ID: <LETRA> (<LETRAOUDIGITO>)* (<FINALSUBLINHADO>)* >
| <TOKEN_NUMLITERAL: <DIGITOS> <FACAO_OPCIONAL> <EXPOENTE_OPCIONAL> >
}

TOKEN :
{

 <LETRA: ["a"-"z","A"-"Z"]>
 |<DIGITO: ["0"-"9"]>
 |<DIGITOS: (<DIGITO>)+>
 |<FACAO_OPCIONAL: ("."(<DIGITOS>))?>
 |<EXPOENTE_OPCIONAL: ("E"("+" | "-")? <DIGITOS>)? >
 |<LETRAOUDIGITO: (<LETRA>| <DIGITO>) >
 |<FINALSUBLINHADO: ("_"(<LETRAOUDIGITO>)+)>
}



void Lugosi () :
{MAIN main = null; FUNC funcao; ArrayList<FUNC> funcoes = new ArrayList();}
{
main = regraMain()
(funcao = regraFunc() {funcoes.add(funcao);})?
{System.out.println("-------------------------\n" + main.toString() + new IMPRIMEFUNCS(funcoes).toString()+"\n------------------------------------");}
<EOF> 
}

MAIN regraMain():
{VARDECL variaveis = null; SEQCOMANDOS seqcomandos = null;}
{
  <MAIN> <ACHAVES>
  variaveis = regraVardecl()
  seqcomandos = regraSeqcomandos()
  <FCHAVES>
    {System.out.println(new MAIN(variaveis, seqcomandos).toString());}

  {return new MAIN(variaveis, seqcomandos);}

}

VARDECL regraVardecl():
{ArrayList<TIPO> tipos = new ArrayList(); ArrayList<String> ids = new ArrayList(); TIPO tipo = null; Token id = null;}
{
  (<VAR> tipo = regraTipo() id = <TOKEN_ID> <SEMI> {tipos.add(tipo); ids.add(id.image);})*
  {return new VARDECL(tipos, ids);}
}

TIPO regraTipo():
{Token t = null;}
{
   (t = <INT> |t = <BOOL> | t =<FLOAT> | t =<VOID>)

  {return new TIPO(t.image);}
}

SEQCOMANDOS regraSeqcomandos():
{ArrayList<COMANDO> comandos = new ArrayList(); COMANDO com = null;}
{
  (com = regraComando() {comandos.add(com);})*
    {System.out.println(new SEQCOMANDOS(comandos).toString());}
  {return new SEQCOMANDOS(comandos);}
}

COMANDO regraComando():
{Token tPrincipal=null; EXP exp = null; SEQCOMANDOS seqcomandos = null; COMANDO com = null; LISTAEXP exps = null;}
{
  (tPrincipal = <TOKEN_ID> ((<ATTRIB> exp = regraExp() <SEMI>){com = new ATRIB(tPrincipal.image,exp);}|(<APARENT> (exps = regraListaExp(new ArrayList<EXP>()))? <FPARENT> <SEMI>)) {com = new CHAMADA(tPrincipal.image,exps);}
|  tPrincipal = <IF> <APARENT> exp = regraExp() <FPARENT> <ACHAVES>  seqcomandos = regraSeqcomandos() <FCHAVES> <SEMI> {com = new IF(exp,seqcomandos);}
| tPrincipal = <WHILE> <APARENT> exp = regraExp() <FPARENT> <DO> <ACHAVES>  seqcomandos = regraSeqcomandos() <FCHAVES> <SEMI> {com = new WHILE(exp,seqcomandos);}
| tPrincipal= <DO> <ACHAVES>  seqcomandos = regraSeqcomandos() <FCHAVES> <WHILE> <APARENT> exp = regraExp() <FPARENT> <SEMI> {com = new DOWHILE(exp,seqcomandos);}
| tPrincipal = <RETURN> exp = regraExp() <SEMI> {com = new RETURN(exp);}
| tPrincipal = <PRINT> <APARENT> exp = regraExp() <FPARENT> <SEMI> {com = new PRINT(exp);})
{System.out.println(com.toString());}
{return com;}

  
}

EXP regraExp():
{FATOR f=null; OPERADOR op=null; EXP exp1=null; EXP exp2=null;}
{
  (f = regraFator()| (<APARENT> exp1=regraExp() op = regraOp() exp2 =regraExp() <FPARENT>))
  {if(f==null){
    return new EXP(exp1,op,exp2);
    } else{
    return new EXP(f);
    }
  }

}

FATOR regraFator():
{Token t; LISTAEXP regras = null;}
{
  (t = <TOKEN_ID> (<APARENT> regras = regraListaExp(new ArrayList<EXP>()) <FPARENT>)? 
  | t= <TOKEN_NUMLITERAL>
  | t = <TRUE>
  | t= <FALSE>)
  {return new FATOR(t.image, regras);}
}

OPERADOR regraOp():
{Token t = null;}
{
  (t = <OPSOMA>
| t = <OPSUB>
| t = <OPMULT>
| t = <OPDIV>
| t = <OPAND>
| t = <OPOR>
| t = <OPMENORQ>
| t = <OPMAIORQ>
| t = <OPIGUAL>)
  {return new OPERADOR(t.image);}
}

LISTAEXP regraListaExp(ArrayList<EXP> exps):
{ EXP exp = null;}
{
  exp = regraExp() {exps.add(exp);} regraListaExpAux(exps)
{return new LISTAEXP(exps);}
}

void regraListaExpAux(ArrayList<EXP> exps):
{EXP exp = null;}
{
  (<OPCOMMA> exp = regraExp() {exps.add(exp);} regraListaExpAux(exps))?
}

FUNC regraFunc():
{TIPO tipo = null; Token id = null; LISTAARG argumentos = null; VARDECL variaveis = null; SEQCOMANDOS seqcomandos;}
{
  (<FUNCTION> tipo=regraTipo() id=<TOKEN_ID> <APARENT> argumentos = regraListaArg(new ArrayList<TIPO>(),new ArrayList<String>()) <FPARENT> <ACHAVES> variaveis = regraVardecl()
  seqcomandos = regraSeqcomandos() <FCHAVES>)+

  {return new FUNC(tipo, id.image, argumentos, variaveis, seqcomandos);}
}

LISTAARG regraListaArg(ArrayList<TIPO> tiposParam, ArrayList<String> idsParam ):
{TIPO tipo = null; Token id = null;}
{
  (tipo = regraTipo() id = <TOKEN_ID> {tiposParam.add(tipo); idsParam.add(id.image);} (<OPCOMMA> regraListaArg(tiposParam, idsParam))?)
  {return new LISTAARG(tiposParam, idsParam);}

}

